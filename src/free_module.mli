(** Free module over a ring generated by a finite, totally ordered set *)

(** [Make] constructs an (OCaml) module to handle the free (algebraic) [R]-module generated by finite subsets of [Basis].
    The implementation of free modules is backed by a map implementation [M] that must be provided by the user.
 *)
module Make : functor
  (Basis : Basic_intf.Std)
  (R : Basic_intf.Ring_std)
  (M : Map.S with type key = Basis.t)
  ->
  Basic_intf.Free_module_std
    with module R = R
     and module Basis = Basis
     and type basis = Basis.t
     and type t = R.t M.t

(** A free module packed with its underlying map implementation *)
module type Free_module_with_map = sig
  type r

  module Map : Map.S

  include
    Basic_intf.Free_module_std
      with type R.t = r
       and type Basis.t = Map.key
       and type t = r Map.t
end

(** [Make_with_map] constructs a free [R]-module over [X], instsan *)
module Make_with_map : functor (X : Basic_intf.Std) (R : Basic_intf.Ring_std) ->
  Free_module_with_map with type r = R.t and type Map.key = X.t

(** Free modules with coefficients in [Q.t] *)
module Rational_valued : sig
  module Int :
    Basic_intf.Free_module_std with type R.t = Q.t and type Basis.t = int

  module String :
    Basic_intf.Free_module_std with type R.t = Q.t and type Basis.t = string

  module Float :
    Basic_intf.Free_module_std with type R.t = Q.t and type Basis.t = float

  module Bool :
    Basic_intf.Free_module_std with type R.t = Q.t and type Basis.t = bool

  module Make_with_map : functor (X : Basic_intf.Std) ->
    Free_module_with_map with type r = Q.t and type Map.key = X.t
end

(** Free modules with [float] coefficients *)
module Float_valued : sig
  module Int :
    Basic_intf.Free_module_std with type R.t = float and type Basis.t = int

  module String :
    Basic_intf.Free_module_std with type R.t = float and type Basis.t = string

  module Float :
    Basic_intf.Free_module_std with type R.t = float and type Basis.t = float

  module Bool :
    Basic_intf.Free_module_std with type R.t = float and type Basis.t = bool

  module Make_with_map : functor (X : Basic_intf.Std) ->
    Free_module_with_map with type r = float and type Map.key = X.t
end
